#+TITLE: tmuxp-overwrite
#+AUTHOR: ma
#+EXPORT_FILE_NAME: README.md

* Abstract

Tmuxp doesn't currently allow you to overwrite existing tmuxp files
generated by typing ~tmuxp freeze~. This bash script emulates that
behavior.

* Some kind of license?
Do with this code what you deem appropriate, just remember to use at
your own risk. I'd recommend you to check it first since it's not that
complicated anyway, just a bunch of conveniently placed bash
commands. Happy coding.
* Preamble

Be aware: this is just a momentary solution until tmuxp adopts session
overwriting natively. And my bash scripting capabilities are quite
humble, still I want to be able to programmatically overwrite a ~tmuxp
freeze~ file.

Here you can see that the issue has not been addressed in a while (at
least at the time of this writing):
https://github.com/tmux-python/tmuxp/issues/64

Also, ~tmuxp freeze~ at the moment of =freezing= a session adds the
next line to the generated file:

#+begin_example
shell_command: python3
#+end_example

This line makes ~tmuxp load yourFrozenSession~ to automatically start
a ~python3~ process every time you load your session. At least for me,
this behavior is unwanted. This code removes that line from the
generated file too.

I opened (and quickly closed) an issue about this which you can read
about here:

https://github.com/tmux-python/tmuxp/issues/588

* Use
Warning: there are a couple of things you have to make sure before you
execute this command.

- You have to be _attached_ to the tmux session you want to ~tmuxp
  freeze~.
  
- Your tmux session must be the only active session in the tmux
  server. This is a thing with tmuxp itself which I'm not gonna
  investigate further. I just know that's how it can work without any
  problems.

* Code
:PROPERTIES:
:header-args: :results silent :padline no :shebang "#!/usr/bin/env bash" :tangle ~/bin/tpoverwrite
:END:

** prehelp
*** if
#+begin_src shell
if [[ -z "$1"  ]]
then
#+end_src
#+begin_src shell
echo 'tpoverwrite is a bash macro to overwrite tmuxp sessions'
echo 'type '\''tpoverwrite --help'\'' for more info'
exit
#+end_src
*** fi
#+begin_src shell
fi
#+end_src
** help
*** if
#+begin_src shell
if [[ $1 == '--help' ]]
then
#+end_src
*** show help
#+begin_src shell
echo 'tpoverwrite - tmuxp overwrite'
echo ''
echo 'tpoverwrite is a bash macro that lets you quickly overwrite an'
echo 'EXISTING tmuxp session (it won'\''t create a new one from scratch).'
echo ''
echo 'source code: '
echo 'USAGE'
echo ''\''tpoverwrite OPTION'\'''
echo ''
#+end_src
*** show options
#+begin_src shell
echo 'OPTIONS'
echo '-o'
echo '--overwrite'
echo 'overwrite your EXISTING tmuxp frozen file'
echo ''
echo '--depython'
echo 'remove that '\''python3'\'' line from the frozen file'
echo '--debash'
echo 'remove that '\''bash'\'' line from the frozen file'
echo 'remove that '\''shell_command: bash'\'' line from the frozen file'
#+end_src
*** warning
#+begin_src shell
echo 'for the moment it only works with .yaml files since I don'\''t know yet'
echo 'how to implement TAB completion from within a bash script :D'
echo 'Happy coding'
exit
#+end_src
*** fi
#+begin_src shell
fi
#+end_src
** identify file to be manipulated

If you give it not ~--help~ option then you want to actually use it.

By the way, ~tmuxp~ is more flexible in the search of the file, this
script for the moment is not that flexible; it looks only in
~/.tmuxp/. If I need it to be more flexible in the future I will
update it, but that's not guaranteed since for the moment it's just
what I need.

*** if
#+begin_src shell
if [[ "$1" != "--help" ]] || [[ -z $1 ]]
then
#+end_src
*** store file info
#+begin_src shell
FILE_LOCATION=~/.tmuxp
SESSION_NAME=$(tmux display-message -p '#S')
EXTENSION=yaml
YOUR_FILE=$FILE_LOCATION/$SESSION_NAME.$EXTENSION
#+end_src

*** fi
#+begin_src shell
fi
#+end_src

** overwrite

backup and remove existing frozen file

Get tmux session name from bash:
https://superuser.com/questions/410017/how-do-i-know-current-tmux-session-name-by-running-tmux-command

*** if
#+begin_src shell
if [[ "$1" == "-o" ]] || [[ "$1" == "--overwrite" ]]
then
#+end_src
*** heads up

There's a catch I don't know how to solve:

If for any reason you abort the ~freeze~ process, you'll end up with
no ~freeze~ file, which will cause errors the next time you'll want to overwrite.

Gotta check that.

If you abort the freezing, you can recover.

#+begin_src shell
echo "Overwriting your tmuxp session:"
#+end_src
*** backup file and start ~tmuxp freeze~ process


#+begin_src shell
cat $YOUR_FILE > $YOUR_FILE~ # for backup
rm $YOUR_FILE
tmuxp freeze 
#+end_src
*** done check
#+begin_src shell
echo 'tmuxp session backed up and overwriten in:'
echo $YOUR_FILE
#+end_src

*** fi
#+begin_src shell
fi
#+end_src

** recover
*** if
#+begin_src shell
if [[ "$1" == "-r" ]] || [[ "$1" == "--recover" ]]
then
#+end_src

*** mv file~ to file
#+begin_src shell
if mv "$YOUR_FILE~" "$YOUR_FILE"
then
echo 'renamed:'
echo \'$YOUR_FILE~\'
echo 'to'
echo \'$YOUR_FILE\'
fi
#+end_src
*** fi
#+begin_src shell
fi
#+end_src

** depython

remove ~python3~ line from generated ~tmuxp freeze~ file.
Once the file is generated, it should contain a line that says

#+begin_example
~shell_command: python3~
#+end_example

, the next code gets rid of that line.

*** if
#+begin_src shell
if [[ "$1" == "--depython" ]]
then
#+end_src

*** heads up
#+begin_src shell
echo 'Warning: if you actually are running anything that contains the word'
echo 'python3 and gets saved into the session, it could mess with your'
echo 'tmuxp freeze file.'
echo ''
echo 'A backup of your file will be stored in'
echo '/tmp/tmuxp/frozenPreCleaning/'
echo 'in case anything goes wrong.'
#+end_src

*** the actual thing
#+begin_src shell
AUX_FILE=$FILE_LOCATION/auxFile
cat $YOUR_FILE > ~/.tmuxp/depython/$SESSION_NAME.$EXTENSION
sed '/python3/d' $YOUR_FILE > $AUX_FILE
cat $AUX_FILE > $YOUR_FILE
#+end_src

*** done check
#+begin_src shell
echo 'done: file depythoned.'
#+end_src
*** fi
#+begin_src shell
fi
#+end_src
** debash
*** case
When you ~freeze~ a session that has at least one window with the bare
command line in it, ~tmuxp freeze~ actually remembers that too and,
much like the python3 thing, also does it with ~bash~. That is less of
a problem that the ~python3~ case, but still when you ~tmuxp load~
you'll end up with unnecessary shell nesting. Try it out yourself:
type 

#+begin_example
echo $SHLVL
#+end_example

and see the output.

- When you open a terminal it's 1
- When you open tmux inside a terminal it's 2
- When you ~tmuxp load~ it's 3. However when I created that session to
  be frozen it was 2. One shell nesting level extra.
  
The next script does the exact same thing that the ~python3~ case but
now for the ~bash~ command being written in the frozen file.
*** code
**** if
#+begin_src shell
if [[ "$1" == "--debash" ]]
then
#+end_src

**** heads up
#+begin_src shell
echo 'Warning: if you actually are running anything that contains the word'
echo ''\''bash'\'' and gets saved into the session, it could mess with your'
echo 'tmuxp freeze file.'
echo ''
echo 'A backup of your file will be stored in'
echo '/tmp/tmuxp/frozenPreCleaning/'
echo 'in case anything goes wrong.'
#+end_src

**** the actual thing
#+begin_src shell
AUX_FILE=$FILE_LOCATION/auxFile
cat $YOUR_FILE > ~/.tmuxp/depython/$SESSION_NAME.$EXTENSION
sed '/shell_command:\ bash/d' $YOUR_FILE > $AUX_FILE
cat $AUX_FILE > $YOUR_FILE
#+end_src

**** done check
#+begin_src shell
echo 'done: file debashed.'
#+end_src
**** fi
#+begin_src shell
fi
#+end_src

** exit
#+begin_src shell
exit
#+end_src
* Installation

It's just a bash script, you can ~git clone~ this repo, move it into
your ~~/bin/~ and start using it (remember to load your ~bin~ folder in
your $PATH).

#+begin_example
git clone git@github.com:Ma-Nu-El/tmuxpoverwrite.git 
#+end_example
